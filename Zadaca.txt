Python Developer
Работа на реален проект

Flask апликација за анализа на податоци

1. Задача
Потребно е да се направи Flask апликација за анализа на податоци од корисниците
кои вршат нарачки и плаќања за една e-продавница.
Податоците за извршените плаќања се чуваат во SQLite база на податоци, а со оваа
Flask апликација ќе се креира API за нивна анализа. Со неа ќе имаме пристап до
вкупната потрошувачка на одреден корисник и просечната потрошувачка за
одредена старосна група. Податоците за корисници кои надминуваат одредена
граница на потрошени средства се чуваат во MongoDB база на податоци. Со оваа
интеграција имаме можност за пристап до user ID на секој корисник на кој што му
следува ваучер за бонус на крајот на годината.
 Бонус 1 и 2
Оваа апликација да има unit тестови за секој API endpoint. Исто така, да се направи
интеграција со која ќе се испраќаат пресметаните статистики до менаџментот на епродавницата, преку Telegram пораки.
2. Предуслови за изработка на проектот
1. SQLite база на податоци, која ќе се користи за пристап до податоците на
корисниците
2. MongoDB: Креирајте MongoDB база на податоци за чување на податоците на
корисниците (прво локално, а кога се би работело како што треба, и хостирана)
3. DB Browser (SQLite)
4. Python 3.x
5. Инсталирани библиотеки
1. pymongo
2. sqlalchemy
3. requests
4. json
5. други библиотеки, по потреба
3. API Endpoints
1. Вкупна потрошувачка за одреден купувач
 Endpoint: /average_spending_by_age
 Метод: GET
 Опис: Retrieves the total spending for a specific user based on their user ID
 Параметри: user_id (integer): Уникатен user ID за купувач
 Response: JSON објект кој ги содржи user ID и вкупната потрошувачка за
одреден купувач
2. Просечна потрошувачка за одредена старосна група
 Endpoint: /total_spent/<user_id>
 Метод: GET
 Опис: Calculates the average spending for different age ranges and sends the
results to specific Telegram users.
 Response: JSON објект кој содржи податоци за просечната потрошувачка за
одредена старосна група (18-24, 25-30, 31-36, 37-47, >47)
3. Бонус за потрошувачи
 Endpoint: /write_to_mongodb
 Метод: POST
 Опис: This API endpoint allows clients to submit user data that exceeds specific
amount of spending in JSON format, which is then inserted into a MongoDB
collection.
 Пример за input JSON : { “user_id”: 1, “total_spending”: 2000 }
 Response: По успешен запис на податоци за одреден потрошувач во
MongoDB колекција, АПИ-то ќе враќа JSON објект со порака за успешен
запис и со HTTP status code 201 Created.
 Во случај на појава на грешки при запишувањето, да се прикаже порака со
детали за грешката и соодрветен HTTP status code

4. SQLite база на податоци
1. Табела user_info
 Податоци: Табелата содржи податоци за купувачите, user IDs, имиња,
emails и години
 Колони
1. user_id: Уникатен податок за секој купувач
2. name: Името на купувачот
3. email: Email адреса на купувачот
4. age: Години на купувачот
2. Табела user_spending
 Податоци: Табелата содржи податоци за потрошувачката на купувачите
и соодветната календарска година
 Колони
1. user_id: Уникатен податок за секој купувач
2. money_spent : Потрошувачка од одреден купувач
3. year: Годината во која е забележана потрошувачката
5. Бонус 1 – интеграција со Telegram
Апликацијата ќе испраќа одредени пресметани статистички податоци (пример,
просечната потрошувачка за одредена старсна група), до менаџментот на епродавницата. Оваа интеграција со Telegram да се направи со Telegram Bot API.
6. Бонус 2 – Unit тестови за API endpoints
Да се напишат unit tests за API endpoints, за различни сценарија. 
